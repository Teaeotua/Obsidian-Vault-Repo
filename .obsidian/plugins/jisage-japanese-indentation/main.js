"use strict";const f=require("obsidian"),p=r=>r.match(/^ *> ?\[!.+?\]/)!=null,m=r=>r.match(/^((>| )*)?>/),C=r=>r.match(/^\s+/),g=(r,o,c)=>{var l;const e=[];for(let t=o;t<=c;t++){const n=r.getLine(t);if(n==null||p(n))continue;const u=(l=m(n))==null?void 0:l[0];if(u!=null){const s=Array.from(n);s.splice(0,u.length);const i=s.join("");e.push(i);continue}e.push(n)}return e},y=(r,o)=>{const c=t=>t[0]===`
`;let e=0;return Array.from(r.childNodes).map(t=>{var n;if(t.nodeName==="#text"&&c(t.textContent??"")){e+=1;const u=o[e],s=(n=C(u))==null?void 0:n[0];if(s==null)return t;{const i=Array.from(t.textContent??"");i.splice(1,0,s);const d=i.join(""),a=t.cloneNode();return a.textContent=d,a}}return t})};class A extends f.Plugin{async onload(){this.registerMarkdownPostProcessor((o,c)=>{var i,d,a;const e=o.querySelector("p");if(e==null)return;const l=(i=c.getSectionInfo(o))==null?void 0:i.lineStart,t=(d=c.getSectionInfo(o))==null?void 0:d.lineEnd;if(l==null||t==null)return;const n=(a=this.app.workspace.activeEditor)==null?void 0:a.editor;if(n==null)return;const u=g(n,l,t),s=y(e,u);for(;e.firstChild!=null;)e.removeChild(e.firstChild);s.forEach(h=>{e.appendChild(h)})})}}module.exports=A;

/* nosourcemap */